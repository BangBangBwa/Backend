<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="MemberMapper">
  <insert id="save" parameterType="member" keyProperty="id">
    INSERT INTO members (
      sns_type,     sns_id,               email,        nickname,     profile,
      role,         self_introduction,    deleted_at,   created_id,   created_at,
      updated_id,   updated_at
    ) VALUES (
      #{snsType},   #{snsId},             #{email},     #{nickname},  #{profile},
      #{role},      #{selfIntroduction},  #{deletedAt}, #{createdId}, #{createdAt},
      #{updatedId}, #{updatedAt}
    )
  </insert>

  <select id="findBySns" parameterType="HashMap" resultType="member">
    SELECT * FROM members WHERE sns_id = #{snsId} AND sns_type = #{snsType};
  </select>

  <select id="findByNickname" parameterType="String" resultType="member">
    SELECT * FROM members WHERE nickname = #{nickname};
  </select>

  <select id="findById" parameterType="Long" resultType="member">
    SELECT * FROM members WHERE id = #{id};
  </select>

  <select id="findByNicknameContaining" parameterType="String" resultType="member">
    SELECT * FROM members
    WHERE nickname LIKE CONCAT(#{nickname}, '%')
    LIMIT 3
  </select>

  <resultMap id="ProfileMap" type="com.bangbangbwa.backend.domain.member.common.dto.ProfileDto">
    <id property="memberId" column="member_id"/>
    <result property="imageUrl" column="image_url"/>
    <result property="nickname" column="nickname"/>
    <result property="isFollowing" column="is_following"/>
    <result property="selfIntroduction" column="self_introduction"/>
    <result property="isStreamer" column="is_streamer"/>
    <collection property="interestTags" ofType="com.bangbangbwa.backend.domain.tag.common.entity.Tag">
      <id property="id" column="interest_tag_id"/>
      <result property="name" column="interest_tag_name"/>
    </collection>
    <collection property="streamerTags" ofType="com.bangbangbwa.backend.domain.tag.common.entity.Tag">
      <id property="id" column="streamer_tag_id"/>
      <result property="name" column="streamer_tag_name"/>
    </collection>
  </resultMap>

  <select id="findProfile"
    parameterType="com.bangbangbwa.backend.domain.member.common.dto.ProfileDto"
    resultMap="ProfileMap">

    SELECT #{memberId} AS member_id,
           m.profile AS image_url,
           m.nickname,
           (f.id IS NOT NULL) AS is_following,
           m.self_introduction AS self_introduction,
           t1.id AS interest_tag_id,
           t1.name AS interest_tag_name,
           (s.id IS NOT NULL) AS is_streamer,
           t2.id AS streamer_tag_id,
           t2.name AS streamer_tag_name
    FROM members m
        LEFT JOIN follow f
               ON f.followee_id = m.id
              AND f.follower_id = #{currentMemberId}
        LEFT JOIN members_tags mt
               ON mt.member_id = m.id
        LEFT JOIN tags t1
               ON t1.id = mt.tag_id
        LEFT JOIN streamers s
               ON s.member_id = m.id
        LEFT JOIN streamers_tags st
               ON st.streamer_id = s.id
        LEFT JOIN tags t2
               ON t2.id = st.tag_id
    WHERE m.id = #{memberId};
  </select>

  <select id="findSummary"
    parameterType="com.bangbangbwa.backend.domain.member.common.dto.SummaryDto"
    resultType="com.bangbangbwa.backend.domain.member.common.dto.SummaryDto">
    SELECT
        #{memberId} AS member_id,
        SUM(CASE WHEN type = 'follower' THEN cnt ELSE 0 END) AS follower_count,
        SUM(CASE WHEN type = 'following' THEN cnt ELSE 0 END) AS following_count,
        SUM(CASE WHEN type = 'post' THEN cnt ELSE 0 END) AS post_count,
        MAX(is_streamer) AS is_streamer,
        MAX(is_submitted_to_streamer) AS is_submitted_to_streamer
    FROM (
        SELECT
            'follower' AS type,
            COUNT(*) AS cnt,
            0 AS is_streamer,
            0 AS is_submitted_to_streamer
        FROM follow
        WHERE followee_id = #{memberId}

        UNION ALL

        SELECT
            'following' AS type,
            COUNT(*) AS cnt,
            0 AS is_streamer,
            0 AS is_submitted_to_streamer
        FROM follow
        WHERE follower_id = #{memberId}

        UNION ALL

        SELECT
            'post' AS type,
            COUNT(*) AS cnt,
            0 AS is_streamer,
            0 AS is_submitted_to_streamer
        FROM posts
        WHERE member_id = #{memberId}

        UNION ALL

        SELECT
            'streamer' AS type,
            0 AS cnt,
            1 AS is_streamer,
            0 AS is_submitted_to_streamer
        FROM streamers
        WHERE member_id = #{memberId}

        UNION ALL

        SELECT
            'pending' AS type,
            0 AS cnt,
            0 AS is_streamer,
            CASE WHEN status = #{pendingType} THEN 1 ELSE 0 END AS is_submitted_to_streamer
        FROM pending_streamer
        WHERE member_id = #{memberId}
    ) t;
  </select>
</mapper>